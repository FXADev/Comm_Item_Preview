name: Nightly ETL Process

on:
  schedule:
    # Run at 9:30 AM EST (13:30 UTC)
    - cron: '0 13 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  run-etl:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.lock
        
    - name: Install SQL Server ODBC Driver
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
        echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
        
    - name: Set workflow information
      run: |
        echo "startTime=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
        echo "repository=${{ github.repository }}" >> $GITHUB_ENV
        echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Run ETL process
      id: etl
      env:
        # Use GitHub secrets for all credentials
        REDSHIFT_HOST: ${{ secrets.REDSHIFT_HOST }}
        REDSHIFT_PORT: ${{ secrets.REDSHIFT_PORT }}
        REDSHIFT_DATABASE: ${{ secrets.REDSHIFT_DATABASE }}
        REDSHIFT_USER: ${{ secrets.REDSHIFT_USER }}
        REDSHIFT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
        REDSHIFT_SCHEMA: ${{ secrets.REDSHIFT_SCHEMA }}
        SF_USERNAME: ${{ secrets.SF_USERNAME }}
        SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
        SF_SECURITY_TOKEN: ${{ secrets.SF_SECURITY_TOKEN }}
        SQL_SERVER: ${{ secrets.SQL_SERVER }}
        SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
        SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
        SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        SQL_DRIVER: ${{ secrets.SQL_DRIVER }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Capture both stdout and stderr, and the exit code
        python etl_main.py 2>&1 | tee etl_output.log
        echo "etl_exit_code=${PIPESTATUS[0]}" >> $GITHUB_ENV
        
        # Check for specific error patterns
        if grep -q "REDSHIFT CONNECTION FAILURE" etl_output.log; then
          echo "error_type=REDSHIFT_CONNECTION" >> $GITHUB_ENV
          echo "ETL failed due to Redshift connection error"
        elif grep -q "SALESFORCE CONNECTION FAILURE" etl_output.log; then
          echo "error_type=SALESFORCE_CONNECTION" >> $GITHUB_ENV
          echo "ETL failed due to Salesforce connection error"
        elif grep -q "PASSWORD EXPIRED" etl_output.log; then
          echo "error_type=PASSWORD_EXPIRED" >> $GITHUB_ENV
          echo "ETL failed due to expired password"
        else
          echo "error_type=GENERAL" >> $GITHUB_ENV
        fi
        
        # Exit with the same code as the ETL process
        exit ${PIPESTATUS[0]}
        
    - name: Record end time
      if: always()
      run: echo "endTime=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
        
    - name: Generate ETL metrics for email
      if: success()
      run: |
        # Ensure metrics directory exists
        mkdir -p metrics
        python scripts/generate_email_metrics.py --output email_metrics.html
        
    - name: Check for metrics file
      if: success()
      run: |
        if [ -f email_metrics.html ]; then
          echo "metrics_exist=true" >> $GITHUB_ENV
        else
          echo "metrics_exist=false" >> $GITHUB_ENV
        fi
        
    # Send email notification on successful completion of the ETL process
    - name: Notify on success
      if: success()
      uses: dawidd6/action-send-mail@v3
      with:
        # Gmail SMTP configuration
        server_address: smtp.gmail.com
        server_port: 465
        secure: true
        # Use the exact secret names created in GitHub
        username: ${{ secrets.smtp_username }}
        password: ${{ secrets.smtp_password }}
        subject: "‚úÖ Commission Preview ETL Success (${{ env.total_queried || 'N/A' }} rows processed)"
        body: |
          ## ‚úÖ Commission Preview ETL Success
          
          The nightly ETL process completed successfully.
          
          **Repository:** ${{ env.repository }}
          **Branch:** ${{ env.branch }}
          **Start time:** ${{ env.startTime }}
          **End time:** ${{ env.endTime }}
          
          ### ETL Metrics Summary
          - **Total Rows Queried:** ${{ env.total_queried || 'N/A' }}
          - **Total Rows Inserted:** ${{ env.total_inserted || 'N/A' }}
          
          Detailed metrics table is included below.
          
          ### View the full run details:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        # Send emails to all recipients in the notification list
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: Commission ETL <noreply@bridgepointetechnologies.com>
        convert_markdown: true
        priority: high
        attachments: |
          {% if env.metrics_exist == 'true' %}
          email_metrics.html
          {% endif %}
        
    # Send email notification when ETL process fails
    - name: Notify on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        # Gmail SMTP configuration
        server_address: smtp.gmail.com
        server_port: 465
        secure: true
        # Use the exact secret names created in GitHub
        username: ${{ secrets.smtp_username }}
        password: ${{ secrets.smtp_password }}
        subject: "‚ö†Ô∏è Commission Preview ETL Failure - ${{ env.error_type }}"
        body: |
          ## ‚ö†Ô∏è Commission Preview ETL Failure
          
          The nightly ETL process failed.
          
          **Repository:** ${{ env.repository }}
          **Branch:** ${{ env.branch }}
          **Start time:** ${{ env.startTime }}
          **End time:** ${{ env.endTime }}
          
          ### Error Information
          **Error Type:** ${{ env.error_type }}
          
          {% if env.error_type == 'REDSHIFT_CONNECTION' %}
          ### üî¥ Redshift Connection Failed
          
          The ETL process could not connect to Redshift. This could be due to:
          - Invalid credentials (username/password)
          - Expired password
          - Network connectivity issues
          - Incorrect host/port configuration
          
          **Action Required:**
          1. Verify REDSHIFT_USER and REDSHIFT_PASSWORD in GitHub Secrets
          2. Check if the Redshift password has expired
          3. Verify REDSHIFT_HOST and REDSHIFT_PORT are correct
          {% elsif env.error_type == 'SALESFORCE_CONNECTION' %}
          ### üî¥ Salesforce Connection Failed
          
          The ETL process could not connect to Salesforce. This could be due to:
          - Invalid credentials (username/password/security token)
          - Expired password
          - IP restrictions on the Salesforce org
          - Invalid or expired security token
          
          **Action Required:**
          1. Verify SF_USERNAME and SF_PASSWORD in GitHub Secrets
          2. Check if the Salesforce password has expired
          3. Verify SF_SECURITY_TOKEN is current (reset if needed)
          4. Check Salesforce login history for more details
          {% elsif env.error_type == 'PASSWORD_EXPIRED' %}
          ### üî¥ Password Expired
          
          One or more database passwords have expired.
          
          **Action Required:**
          1. Update the expired password(s) in the respective system
          2. Update the corresponding GitHub Secret(s)
          3. Re-run the ETL process
          {% else %}
          Please check the GitHub Actions logs for detailed error messages.
          {% endif %}
          
          ### View the full run details and logs:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Recent ETL Output:
          ```
          Check the Action logs for detailed error output
          ```
        # Send emails to all recipients in the notification list
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: Commission ETL <noreply@bridgepointetechnologies.com>
        convert_markdown: true
        priority: high
